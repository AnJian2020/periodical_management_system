# -*- coding: utf-8 -*- 
# Generated by xuhao on 2020/11/24 10:27

import json
from datetime import datetime
from celery import shared_task
from .models import SubjectModel, ContributionTypeModel, TradeModel
# from django.core import serializers
from .modelSerializer import SubjectModelSerializer, ContributionTypeModelSerializer, TradeModelSerializer
from django_redis import get_redis_connection
from periodical_management_system.settings import KEY_VALUE_OUT_TIME

systemRedis = get_redis_connection()


@shared_task
def selectSubjectOrTradeOrContributionTypeTask(options) -> str:
    """
    根据options查询科目、行业领域或者投稿类型
    :param options: subject、trade、contribution_type
    :return:
    """
    result = systemRedis.lrange(options, 0, -1)
    if result:
        return json.dumps({'data': [json.loads(item.decode('utf-8')) for item in result]})
    if 'subject' == options:
        selectResultData = SubjectModel.objects.all().order_by('id')
    elif 'contribution_type' == options:
        selectResultData = ContributionTypeModel.objects.all().order_by('id')
    elif 'trade' == options:
        selectResultData = TradeModel.objects.all().order_by('id')
    else:
        return json.dumps({'status': 400, 'data': '错误操作。'})
    resultData = list()
    systemRedis.delete(options)
    for item in selectResultData:
        resultData.append(dict(id=item.id, name=item.name))
        systemRedis.lpush(options, json.dumps(dict(id=item.id, name=item.name)))
    result = json.dumps({'data': resultData})

    # 模型查询结果序列化
    # subject=serializers.serialize('json',selectSubjectData)

    systemRedis.expire(options, KEY_VALUE_OUT_TIME)
    return result


@shared_task
def createSubjectOrTradeOrContributionTypeTask(**newData) -> str:
    """
    创建新的研究方向，并且更新redis存储的subject列表字段
    :param newSubject:
    :return:
    """
    NEED_DATA = ['name', 'brief_introduction', 'options']
    for needData in NEED_DATA:
        if needData not in newData:
            return json.dumps({'status': 400, 'data': "数据项不符合要求。"})
    options = newData.get("options")
    name = newData.get('name')
    bref_introduction = newData.get('bref_introduction')
    if 'subject' == options:
        dataExists = SubjectModel.objects.filter(name=name)
    elif 'contribution_type' == options:
        dataExists = ContributionTypeModel.objects.filter(name=name)
    elif 'trade' == options:
        dataExists = TradeModel.objects.filter(name=name)
    else:
        return json.dumps({'status': 400, 'data': '错误操作。'})
    if dataExists:
        return json.dumps({'status': 204, 'data': '数据项已经存在，无需重复创建。'})
    else:

        def createID(options)->str:
            """
            创建id字段
            :param options:
            :return:
            """
            currentTime = datetime.now()
            id = str(currentTime.year) + str(currentTime.month) + str(currentTime.day) + \
                 str(currentTime.hour) + str(currentTime.minute) + str(currentTime.second)
            if 'subject' == options:
                return 'S' + id
            elif 'contribution_type' == options:
                return 'C' + id
            elif 'trade' == options:
                return 'T' + id
            return 'error'

        if options == 'subject':
            serializer = SubjectModelSerializer(data={'id':createID('subject'),"name": name, 'bref_introduction': bref_introduction})
        elif options == 'contribution_type':
            serializer = ContributionTypeModelSerializer(data=dict(id=createID('contribution_type'),name=name, bref_introduction=bref_introduction))
        else:
            serializer = TradeModelSerializer(data=dict(id=createID('trade'),name=name, bref_introduction=bref_introduction))
        if serializer.is_valid():
            serializer.save()
            return json.dumps({"status": 200, 'data': '数据创建成功。'})
        return json.dumps({'status': 400, 'data': serializer.errors})
