# -*- coding: utf-8 -*- 
# Generated by xuhao on 2020/11/24 10:27

import os
import logging
import json
from datetime import datetime
from celery import shared_task
from django.db.models import Q
from .models import SubjectModel, ContributionTypeModel, TradeModel, ManuscriptModel
from django.core import serializers
from .modelSerializer import SubjectModelSerializer, ContributionTypeModelSerializer, TradeModelSerializer, \
    ManuscriptModelSerializer
from django_redis import get_redis_connection
from periodical_management_system.settings import KEY_VALUE_OUT_TIME

systemRedis = get_redis_connection()


@shared_task
def selectSubjectOrTradeOrContributionTypeTask(options) -> str:
    """
    根据options查询科目、行业领域或者投稿类型
    :param options: subject、trade、contribution_type
    :return:
    """
    result = systemRedis.lrange(options, 0, -1)
    if result:
        return json.dumps({'data': [json.loads(item.decode('utf-8')) for item in result]})
    if 'subject' == options:
        selectResultData = SubjectModel.objects.all().order_by('id')
    elif 'contribution_type' == options:
        selectResultData = ContributionTypeModel.objects.all().order_by('id')
    elif 'trade' == options:
        selectResultData = TradeModel.objects.all().order_by('id')
    else:
        return json.dumps({'status': 400, 'data': '错误操作。'})
    resultData = list()
    systemRedis.delete(options)
    for item in selectResultData:
        resultData.append(dict(id=item.id, name=item.name))
        systemRedis.lpush(options, json.dumps(dict(id=item.id, name=item.name)))
    result = json.dumps({'data': resultData})

    # 模型查询结果序列化
    # subject=serializers.serialize('json',selectSubjectData)

    systemRedis.expire(options, KEY_VALUE_OUT_TIME)
    return result


@shared_task
def createSubjectOrTradeOrContributionTypeTask(**newData) -> str:
    """
    创建新的研究方向，并且更新redis存储的subject列表字段
    :param newSubject:
    :return:
    """
    NEED_DATA = ['name', 'brief_introduction', 'options']
    for needData in NEED_DATA:
        if needData not in newData:
            return json.dumps({'status': 400, 'data': "数据项不符合要求。"})
    options = newData.get("options")
    name = newData.get('name')
    brief_introduction = newData.get('brief_introduction')
    if 'subject' == options:
        dataExists = SubjectModel.objects.filter(name=name)
    elif 'contribution_type' == options:
        dataExists = ContributionTypeModel.objects.filter(name=name)
    elif 'trade' == options:
        dataExists = TradeModel.objects.filter(name=name)
    else:
        return json.dumps({'status': 400, 'data': '错误操作。'})
    if dataExists:
        return json.dumps({'status': 204, 'data': '数据项已经存在，无需重复创建。'})
    else:

        def createID(options) -> str:
            """
            创建id字段
            :param options:
            :return:
            """
            currentTime = datetime.now()
            id = str(currentTime.year) + str(currentTime.month) + str(currentTime.day) + \
                 str(currentTime.hour) + str(currentTime.minute) + str(currentTime.second)
            if 'subject' == options:
                return 'S' + id
            elif 'contribution_type' == options:
                return 'C' + id
            elif 'trade' == options:
                return 'T' + id
            return 'error'

        if options == 'subject':
            serializer = SubjectModelSerializer(
                data={'id': createID('subject'), "name": name, 'brief_introduction': brief_introduction})
        elif options == 'contribution_type':
            serializer = ContributionTypeModelSerializer(
                data=dict(id=createID('contribution_type'), name=name, brief_introduction=brief_introduction))
        else:
            serializer = TradeModelSerializer(
                data=dict(id=createID('trade'), name=name, brief_introduction=brief_introduction))
        if serializer.is_valid():
            serializer.save()
            systemRedis.delete(options)
            return json.dumps({"status": 200, 'data': '数据创建成功。'})
        return json.dumps({'status': 400, 'data': serializer.errors})


@shared_task
def updateSubjectOrTradeOrContributionTypeTask(**data) -> str:
    """
    根据名称更新研究方向、行业领域或者投稿类型信息，并删除redis缓存中的相应数据信息。
    :param data:
    :return:
    """
    NEED_DATA = ['id', 'name', 'brief_introduction', 'options']
    for item in NEED_DATA:
        if item not in data:
            return json.dumps({'status': 400, 'data': "数据项不符合要求。"})
    id = data.get('id')
    options = data.get("options")
    name = data.get('name')
    brief_introduction = data.get('brief_introduction')
    if 'subject' == options:
        dataExists = SubjectModel.objects.filter(id=id).first()
    elif 'contribution_type' == options:
        dataExists = ContributionTypeModel.objects.filter(id=id).first()
    elif 'trade' == options:
        dataExists = TradeModel.objects.filter(id=id).first()
    else:
        return json.dumps({'status': 400, 'data': '错误操作。'})
    if not dataExists:
        return json.dumps({'status': 204, 'data': '修改的数据项不存在。'})
    else:
        if 'subject' == options:
            serializer = SubjectModelSerializer(instance=dataExists,
                                                data=dict(id=id, name=name, brief_introduction=brief_introduction))
        elif 'contribution_type' == options:
            serializer = ContributionTypeModelSerializer(instance=dataExists, data=dict(id=id, name=name,
                                                                                        brief_introduction=brief_introduction))
        else:
            serializer = TradeModelSerializer(instance=dataExists,
                                              data=dict(id=id, name=name, brief_introduction=brief_introduction))
        if serializer.is_valid():
            serializer.update(dataExists, {"id": id, "name": name, "brief_introduction": brief_introduction})
            systemRedis.delete(options)
            return json.dumps({'status': 200, 'data': id + '-修改成功。'})
        return json.dumps({'status': 400, 'data': serializer.errors})


@shared_task
def deleteSubjectOrTradeContributionTypeTask(options, idOrName) -> str:
    """
    根据给定的ID或者名称删除Subject、Trade或者ContributionType中的内容。
    :param options:
    :param idOrName:
    :return:
    """
    if 'subject' == options:
        deleteData = SubjectModel.objects.filter(Q(id=idOrName) | Q(name=idOrName))
    elif 'Trade' == options:
        deleteData = TradeModel.objects.filter(Q(id=idOrName) | Q(name=idOrName))
    elif 'contribution_type' == options:
        deleteData = ContributionTypeModel.objects, filter(Q(id=idOrName) | Q(name=idOrName))
    else:
        return json.dumps({'status': 400, 'data': '错误操作。'})
    if deleteData:
        deleteData.delete()
        systemRedis.delete(options)
        return json.dumps({"status": 200, 'data': '数据删除成功。'})
    return json.dumps({'status': 400, 'data': "删除的数据不存在。"})


def deliverManuscriptTask(**kwargs) -> str:
    """
    稿件投递
    :param kwargs:
    :return:
    """
    with open(os.path.join(os.getcwd(), 'manuscript_record', 'dataItemConfiguration.json'), 'r', encoding='utf-8') as f:
        manuscriptNeedField = json.load(f)['manuscriptNeedFields']
    for field in manuscriptNeedField:
        if field not in kwargs.keys():
            return json.dumps({'status': 400, 'data': "数据项不符合要求。"})

    def createID(idName):
        currentTime = datetime.now()
        idNumber = str(currentTime.year) + str(currentTime.month) + str(currentTime.day) + str(currentTime.hour) + str(
            currentTime.minute) + str(currentTime.second)
        if idName == 'manuscript_id':
            id = "M" + idNumber
        elif idName == "check_id":
            id = "C" + idNumber
        elif idName == "review_id":
            id = "R" + idNumber
        else:
            return
        return id

    manuscriptData = kwargs.copy()
    manuscriptData['check_status'] = dict()
    manuscriptData['review_status'] = dict()
    manuscriptData['manuscript_id'] = createID("manuscript_id")
    manuscriptData['check_status']['id'] = createID('check_id')
    manuscriptData['review_status']['id'] = createID('review_id')
    manuscriptData['subject'] = [manuscriptData['subject']]
    manuscriptData['trade'] = [manuscriptData['trade']]
    manuscriptData['contribution_type'] = [manuscriptData['contribution_type']]

    serializer = ManuscriptModelSerializer(data=manuscriptData)
    if serializer.is_valid():
        serializer.save()
        return json.dumps({"status": 200, "data": "稿件数据插入成功。"})
    logging.error(serializer.error_messages)
    return json.dumps({"status": 400, 'data': serializer.errors})


def selectUserPersonalManuscriptTask(username, options=None, sort_by=None):
    """
    根据用户名查询全部或者部分用户的稿件数据，目前使用装饰器shared_task时会出现bug，故暂时不进行分布式处理。
    :param username:
    :param options: options为None，则查询用户所有的稿件数据，可以为稿件标题，id,作者，通讯作者等
    :param sort_by: 排序关键字
    :return:
    """

    if not options:
        userPersonalManuscriptQuerySet = ManuscriptModel.objects.filter(
            Q(author=username) | Q(author_English=username) | Q(corresponding_author=username))
    else:
        userPersonalManuscriptQuerySet=ManuscriptModel.objects.all().order_by('manuscript_id')
    # userPersonalManuscript=serializers.serialize('json',userPersonalManuscriptQuerySet)
    return userPersonalManuscriptQuerySet


