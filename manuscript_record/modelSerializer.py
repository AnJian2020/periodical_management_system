# -*- coding: utf-8 -*- 
# Generated by xuhao on 2020/11/24 10:28

from .models import SubjectModel, ContributionTypeModel, TradeModel, ManuscriptModel
from manuscript_review.modelSerializer import CheckManuscriptModelSerializer, ReviewManuscriptModelSerializer
from manuscript_review.models import CheckManuscriptModel, ReviewManuscriptModel
from rest_framework import serializers


class SubjectModelSerializer(serializers.ModelSerializer):
    """
    研究方向模型序列化
    """
    add_time = serializers.DateTimeField(read_only=True, required=False)
    brief_introduction = serializers.CharField(required=True)

    class Meta:
        model = SubjectModel
        fields = "__all__"


class ContributionTypeModelSerializer(serializers.ModelSerializer):
    """
    投稿类型模型序列化
    """

    class Meta:
        model = ContributionTypeModel
        fields = "__all__"


class TradeModelSerializer(serializers.ModelSerializer):
    """
    行业领域模型序列化
    """

    class Meta:
        model = TradeModel
        fields = "__all__"


class ManuscriptModelSerializer(serializers.ModelSerializer):
    """
    稿件信息模型序列化
    """
    check_status = CheckManuscriptModelSerializer()
    review_status = ReviewManuscriptModelSerializer()

    class Meta:
        model = ManuscriptModel
        fields = '__all__'

    def create(self, validated_data):
        """因为存在外键和多对多，故重写create方法"""
        newManuscriptData = validated_data.copy()
        check_status = newManuscriptData.pop('check_status')
        review_status = newManuscriptData.pop('review_status')
        checkOrNot = CheckManuscriptModel.objects.filter(id=check_status.get('id', None)).first()
        reviewOrNot = ReviewManuscriptModel.objects.filter(id=review_status.get('id', None)).first()
        if not checkOrNot:
            checkOrNot = CheckManuscriptModel.objects.create(**check_status)
        if not reviewOrNot:
            reviewOrNot = ReviewManuscriptModel.objects.create(**review_status)
        newManuscriptData['check_status'] = checkOrNot
        newManuscriptData['review_status'] = reviewOrNot
        newManuscriptSubject = newManuscriptData.pop('subject')
        newManuscriptTrade = newManuscriptData.pop('trade')
        newManuscriptContributionType = newManuscriptData.pop('contribution_type')
        newManuscript = ManuscriptModel.objects.create(**newManuscriptData)
        newManuscript.subject.set(newManuscriptSubject)
        newManuscript.trade.set(newManuscriptTrade)
        newManuscript.contribution_type.set(newManuscriptContributionType)
        return newManuscript

    def update(self, instance, validated_data):
        """修改稿件的信息"""
        manuscriptData = validated_data.copy()
        manuscriptSubject = manuscriptData.pop('subject')
        manuscriptTrade = manuscriptData.pop('trade')
        manuscriptContributionType = manuscriptData.pop('contribution_type')
        manuscript=ManuscriptModel.objects.filter(id=manuscriptData.get('manuscript_id',None))
        if manuscript:
            manuscript.update(**manuscriptData)
            manuscript[0].subject.set(manuscriptSubject)
            manuscript[0].trade.set(manuscriptTrade)
            manuscript[0].contribution_type.set(manuscriptContributionType)
            return manuscript