# -*- coding: utf-8 -*- 
# Generated by xuhao on 2020/11/18 11:11

from rest_framework.authentication import BaseAuthentication,get_authorization_header
from rest_framework import exceptions
from django_redis import get_redis_connection
from django.utils.translation import gettext_lazy as _
import logging

class TokenAuthenticationRedis(BaseAuthentication):

    keyword = 'Token'

    def authenticate(self, request):

        auth = get_authorization_header(request).split()
        user = getattr(request._request, 'user', None)
        if not auth or auth[0].lower() != self.keyword.lower().encode():
            return None

        if len(auth) == 1:
            msg = _('Invalid token header. No credentials provided.')
            raise exceptions.AuthenticationFailed(msg)
        elif len(auth) > 2:
            msg = _('Invalid token header. Token string should not contain spaces.')
            raise exceptions.AuthenticationFailed(msg)

        try:
            token = auth[1].decode()
        except UnicodeError:
            msg = _('Invalid token header. Token string should not contain invalid characters.')
            raise exceptions.AuthenticationFailed(msg)
        try:
            redis_connection=get_redis_connection()
            redis_token=redis_connection.get(user.username+":token").decode()
        except Exception as error:
            logging.error(error)
            raise exceptions.AuthenticationFailed({'code':405, "error": _("Request error, please login again.")})
        if token != redis_token:
            raise exceptions.AuthenticationFailed({"code": 405, "error": _("Login expired, please login again.")})
        return (user, token)


